\documentclass{article}

\begin{document}

<<Libraries, echo = FALSE, message = FALSE>>=

library(readxl)
library(openxlsx)
library(ggplot2)
library(compositions)
library(ReporteRs)
library(reshape2)
library(plyr)
library(dplyr)
library(grid)
library(gridExtra)
library(scales)
library(HTGPackage)
library(cowplot)

quantile_normalisation <- function(df){
  df_rank <- apply(df,2,rank,ties.method="min")
  df_sorted <- data.frame(apply(df, 2, sort))
  df_mean <- apply(df_sorted, 1, mean)
  
  index_to_mean <- function(my_index, my_mean){
    return(my_mean[my_index])
  }
  
  df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
  rownames(df_final) <- rownames(df)
  return(df_final)
}
cpm.stand <- function(x){
  # browser()
  if(any(apply(x, 2, function(y) any(is.na(y))))) stop("No NA's are allowed in the data matrix")
  totals <- apply(x, 2, sum)+1
  x2 <- x+.5
  CPM <- log2(t(t(x2)/totals) * 10^6)
  return(CPM)
}

#median normalization function
median.norm <- function(x){
  if(any(apply(x, 2, function(y) any(is.na(y))))) stop("No NA's are allowed in the data matrix")
  gmn <- apply(x, 1, function(y) exp(mean(log(y))))
  sfm <- x/gmn
  sf <- apply(sfm, 2, function(y) median(y[is.finite(y)]))
  normdat <- t(t(x)/sf)
  return(normdat)
}

plotPCA <- function(data, annodata, projname, Max=80, pc1 = "PC1", pc2 = "PC2", scale = TRUE){
  x <- t(data)
  pcares<-prcomp(x, scale = scale)
  summary(pcares)
  plot(pcares,type="l")
  pcavect<-pcares$x[,1:5]
  indanno<-intersect(row.names(pcavect),row.names(annodata))
  pcavect<-pcavect[indanno,]
  anno.pca<-annodata[indanno,]
  pcadata <- cbind(anno.pca, pcavect)
  return(pcadata)
}

@

<<Roche_IO_ReadIn, echo = FALSE, message = FALSE>>=
#read in data

#Pilot 2 data 
col1 <- read_excel("C:/Projects/Customers/Roche_IO_Study/RawData/OldData/Roche Column 1 Parsed Data 30-JUN-2015_QualityControlled.xlsx", skip = 7, sheet = 1, col_names = FALSE)
names(col1) <- make.names(gsub("run244\\-(TRSPZ\\d{6})_1", "\\1", col1[3, ]), unique = TRUE)
rownames(col1) <- col1$Sample.Name
#convert to CPM
# col1[-c(1:4), -1] <- cpm.stand(data.matrix(col1[-c(1:4), -1]))
pilot2 <- melt(col1[-c(1:4), ], id = "Sample.Name")
#remove HTG samples
pilot2 <- pilot2[-which(!grepl("TRSPZ", pilot2$variable)), ]
names(pilot2)[1] <- "Probe"
pilot2$value <- as.numeric(pilot2$value)

pilot2Failed <- c("TRSPZ005995", "TRSPZ006044", "TRSPZ008123", "TRSPZ008124", "TRSPZ008754")

#New samples with replicates
c1c6 <- read_excel("C:/Projects/Customers/Roche_IO_Study//RawData/Roche plate 1 C1-C6_parsed.xls", skip = 7, sheet = 1, col_names = FALSE)
names(c1c6) <- make.names(gsub("run182\\-", "", c1c6[3, ]), unique = TRUE)
rownames(c1c6) <- c1c6$Sample.Name
#convert to CPM
# c1c6[-c(1:4), -1] <- cpm.stand(data.matrix(c1c6[-c(1:4), -1]))


c7c12 <- read_excel("C:/Projects/Customers/Roche_IO_Study//RawData/Roche plate 1 C7-C12_parsed.xls", skip = 7, sheet = 1, col_names = FALSE)
names(c7c12) <- make.names(gsub("run182\\-", "", c7c12[3, ]), unique = TRUE)
rownames(c7c12) <- c7c12$Sample.Name
# c7c12[-c(1:4), -1] <- cpm.stand(data.matrix(c7c12[-c(1:4), -1]))

#previously run samples 
plate2 <- read_excel("C:/Projects/Customers/Roche_IO_Study//RawData/Roche plate 2_parsed.xls", skip = 7, sheet = 1, col_names = FALSE)
names(plate2) <- make.names(gsub("run183\\-", "", plate2[3, ]), unique = TRUE)
rownames(plate2) <- plate2$Sample.Name

#new data 
nd1 <- melt(c1c6[-c(1:4), ], id = "Sample.Name")
nd2 <- melt(c7c12[-c(1:4), ], id = "Sample.Name")
ndf <- rbind(nd1, nd2)
rm(nd1, nd2)

#remove HTG samples
ndf <- ndf[-which(grepl("HTG", ndf$variable)), ]

#extract sample information
ndf$SampleID <- gsub("(TRSPZ\\d{6})_\\w{2}_1", "\\1", ndf$variable) 
ndf$Rep <- gsub("TRSPZ\\d{6}_(\\w{2})_1", "\\1", ndf$variable)
names(ndf)[1] <- "Probe"
ndf$value <- as.numeric(ndf$value)
#wide data
ndfw <- join_all(list(c1c6, c7c12), by = "Sample.Name")
rownames(ndfw) <- make.names(ndfw$Sample.Name)

#verify 30 samples
length(unique(ndf$SampleID))
#verify 3 replicates
length(unique(ndf$Rep))

#Old samples new run
odf <- melt(plate2[-c(1:4), ], id = "Sample.Name")
#remove HTG samples
# odf <- odf[-which(grepl("HTG", odf$variable)), ]
names(odf)[1] <- "Probe"
odf$SampleID <- gsub("(TRSPZ\\d{6})_1", "\\1", odf$variable)
odf$value <- as.numeric(odf$value)

newFailed <- c("TRSPZ012126_R3", "TRSPZ004380_R3", "TRSPZ008586_R3")
sameProbes <- unique(pilot2$Probe)[which(unique(pilot2$Probe) %in% unique(odf$Probe))]

failedTotals <- cbind(c1c6[4, which(names(c1c6) %in% c("TRSPZ012126_R3_1", "TRSPZ004380_R3_1", "TRSPZ008586_R3_1") )],
                      c7c12[4, which(names(c7c12) %in% c("TRSPZ012126_R3_1", "TRSPZ004380_R3_1", "TRSPZ008586_R3_1") )])
rownames(failedTotals) <- "Total Reads"
@


<<Roche_IO_ControlProfiles, echo = FALSE>>=

#previous samples new run
odfctrl <- plate2[which(grepl("CTRL", plate2$Sample.Name)), ]
odfctrl <- as.data.frame(apply(odfctrl[, -1], c(1,2), FUN = function(x) as.numeric(as.character(x))))
rownames(odfctrl) <- rownames(plate2)[which(grepl("CTRL", plate2$Sample.Name))]

#Separate control types and convert to CLR
odfANT <- odfctrl[which(grepl("ANT", rownames(odfctrl))), ] 
# rownames(odfANT) <- rownames(odfctrl)[1:5]
clrANT <- as.data.frame(t(clr(acomp(t(odfANT), detectionlimit = 0))))

odfPOS <- odfctrl[which(grepl("POS", rownames(odfctrl))), ] 
# rownames(odfPOS) <- rownames(odfctrl)[6:9]
clrPOS <- as.data.frame(t(clr(acomp(t(odfPOS), detectionlimit = 0))))


#----- Heat Maps -----#
#First get header info on samples
tdf <- plate2[2:4, -1]
rownames(tdf) <- make.names(rownames(plate2)[2:4])
tots <- as.data.frame(t(tdf))
tots$row <- gsub("(\\w{1})\\d{1,2}", "\\1", tots$Well)
tots$column <- gsub("\\w{1}(\\d{1,2})", "\\1", tots$Well)

#q-norm
dfnorm <- plate2[-c(1:4), -1]
dfnorm <- quantile_normalisation(data.matrix(dfnorm))
dfnorm <- colSums(dfnorm)
dfnorm <- rbind(plate2[2:3, -1], dfnorm)
rownames(dfnorm) <- make.names(plate2[2:4, ]$Sample.Name)


getTots <- function(x){#use t-list
  browser()
  df <- as.data.frame(t(x))
  df$row <- gsub("(\\w{1})(\\d{1,2})$", "\\1", df$Well)
  df$column <- gsub("(\\w{1})(\\d{1,2})$", "\\2", df$Well)
  df$Total.Reads <- as.numeric(as.character(df$Total.Reads))
  return(df)
}

totl <- getTots(tdf)

totl$column <- factor(totl$column, levels = as.character(1:12))
#Raw totals
rawTotals <- ggplot(totl, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + plotTheme(legend.position = "right")  +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/Roche_IO_Prev_TotalCountHeatMap_RawTotals.png", rawTotals, width = 8 , height = 7)


totln <- getTots(dfnorm)
totln$column <- factor(totln$column, levels = as.character(1:12))
#Normalized within plates
NormPlates <- ggplot(totln, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/Roche_IO_Prev_TotalCountHeatMap_NormalizedProbesbyPlate.png", NormPlates, width = 8 , height = 7)


#CLR the total reads
clrReads <- function(x){
  names(x) <- gsub("Counts", "Reads", names(x))
   cbind(x, CLR = as.vector(clr( acomp( as.numeric(as.character(x$Total.Reads)) ), detectionlimit = 0 )))
}

CLRTots <- clrReads(tots)
CLRTots$column <- factor(CLRTots$column, levels = 1:12)

CLRTots <- ggplot(CLRTots, aes(x = column, y = row)) + geom_tile(aes(fill = CLR)) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/Roche_IO_Prev_TotalCountHeatMap_CLRTotals.png", CLRTots, width = 8 , height = 7)

#!-----------Check proportionality of pos controls ----->
rawPos <- odfPOS
clrPos <- as.data.frame(t(clr(acomp(t(data.matrix((rawPos)))), detectionLimit = 0)))
rawPos$Probe <- rownames(rawPos)
rawPosl <- melt(rawPos, id = "Probe")
rawPosl$Type <- "log(Raw)"
rawPosl$value <- log(rawPosl$value)

clrPos$Probe <- rownames(clrPos)
clrPosl <- melt(clrPos, id = "Probe")
clrPosl$Type <- "CLR"

posl <- rbind(rawPosl, clrPosl)
suspects <- c("TRSPZ002191_1")
posl$lowTotal <- ifelse(posl$variable %in% suspects, "Low", "Normal")

PosProfile <- ggplot(posl, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = lowTotal)) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_discrete("Subjective Assessment of CLR on Total Reads (from heatmap)")
ggsave("./Paper1/Figures/Roche_IO_Prev_Proportionality_of_PosCntrl_Probes.png", PosProfile, width = 7, height = 8 )

#!-----------Check proportionality of ANT controls ----->
rawAnt <- odfANT
clrAnt <- as.data.frame(t(clr(acomp(t(data.matrix((rawAnt)))), detectionLimit = 0)))
rawAnt$Probe <- rownames(rawAnt)
rawAntl <- melt(rawAnt, id = "Probe")
rawAntl$Type <- "log(Raw)"
rawAntl$value <- log(rawAntl$value + 1)

clrAnt$Probe <- rownames(clrAnt)
clrAntl <- melt(clrAnt, id = "Probe")
clrAntl$Type <- "CLR"

antl <- rbind(rawAntl, clrAntl)
# suspects <- c("uRNA_1_2", "uRNA_2_1")
# posl$lowTotal <- ifelse(posl$variable %in% suspects, "Low", "Normal")

ANTProfile <- ggplot(antl, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line() + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme()# + scale_color_discrete("Subjective Assessment of CLR on Total Reads (from heatmap)")
ggsave("./Paper1/Figures/Roche_IO_Proportionality_of_ANTCntrl_Probes.png", ANTProfile, width = 7, height = 8 )

#----- Heat Maps New Data -----#
#First get header info on samples
ntdf <- ndfw[2:4, -1]
rownames(ntdf) <- make.names(rownames(plate2)[2:4])
ntots <- as.data.frame(t(ntdf))
ntots$row <- gsub("(\\w{1})\\d{1,2}", "\\1", ntots$Well)
ntots$column <- gsub("\\w{1}(\\d{1,2})", "\\1", ntots$Well)

#q-norm
dfnorm <- ndfw[-c(1:4), -1]
dfnorm <- quantile_normalisation(data.matrix(dfnorm))
dfnorm <- colSums(dfnorm)
dfnorm <- rbind(ndfw[2:3, -1], dfnorm)
rownames(dfnorm) <- make.names(ndfw[2:4, ]$Sample.Name)

totl <- getTots(ntdf)

totl$column <- factor(totl$column, levels = as.character(1:12))
totl$Plate <- ifelse(totl$column %in% paste0(1:6), "Plate 1", "Plate 2")
#Raw totals
newRawTotals <- ggplot(totl, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + plotTheme(legend.position = "right")  +  xlab("Plate Column") + ylab("Plate Row") + facet_wrap(~Plate)
ggsave("./Paper1/Figures/Roche_IO_New_TotalCountHeatMap_RawTotals.png", newRawTotals, width = 10 , height = 5)


totln <- getTots(dfnorm)
totln$column <- factor(totln$column, levels = as.character(1:12))
totln$Plate <- ifelse(totln$column %in% paste0(1:6), "Plate 1", "Plate 2")
#Normalized accross plates
NewNormPlates <- ggplot(totln, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row") + facet_wrap(~Plate)
ggsave("./Paper1/Figures/Roche_IO_New_TotalCountHeatMap_NormalizedProbes.png", NewNormPlates, width = 10 , height = 5)

ntots$Plate <- ifelse(ntots$column %in% paste0(1:6), "Plate 1", "Plate 2")
ntots <- split(ntots, ntots$Plate)
CLRTots <- lapply(ntots, clrReads)
CLRTots <- do.call(rbind, CLRTots)
CLRTots$column <- factor(CLRTots$column, levels = 1:12)

NewCLRTots <- ggplot(CLRTots, aes(x = column, y = row)) + geom_tile(aes(fill = CLR)) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row") + facet_wrap(~Plate)
ggsave("./Paper1/Figures/Roche_IO_New_TotalCountHeatMap_CLRTotals.png", NewCLRTots, width = 10 , height = 5)

#!-----------Check proportionality of pos controls ----->
rawPos <- data.matrix(ndfw[which(grepl("POS", rownames(ndfw))), -1])
clrPos <- as.data.frame(t(clr(acomp(t(data.matrix((rawPos)))), detectionLimit = 0)))
rawPos <- as.data.frame(rawPos)
rawPos$Probe <- rownames(rawPos)
rawPosl <- melt(rawPos, id = "Probe")
rawPosl$Type <- "log(Raw)"
rawPosl$value <- log(rawPosl$value)

clrPos$Probe <- rownames(clrPos)
clrPosl <- melt(clrPos, id = "Probe")
clrPosl$Type <- "CLR"

posl <- rbind(rawPosl, clrPosl)
failedANT <- c("TRSPZ012126_R3", "TRSPZ004380_R3", "TRSPZ008586_R3")
posl$failedANT <- ifelse(grepl(paste(failedANT, collapse = "|"), posl$variable), "FAILED", "PASSED")
posl$lowCount <- ifelse(posl$variable == "HTG.4_1", "Low", "Normal")

NewPosProfile <- ggplot(posl, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = lowCount)) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_discrete("Subjective Assessment of CLR on Total Reads (from heatmap)") #+ scale_color_manual("ANT Failure", values = c("red", "black"))
ggsave("./Paper1/Figures/Roche_IO_New_Proportionality_of_PosCntrl_Probes.png", NewPosProfile, width = 7, height = 8 )

#!-----------Check proportionality of ANT controls ----->
rawAnt <- data.matrix(ndfw[which(grepl("ANT", rownames(ndfw))), -1])
clrAnt <- as.data.frame(t(clr(acomp(t(data.matrix((rawAnt)))), detectionLimit = 0)))
rawAnt <- as.data.frame(rawAnt)
rawAnt$Probe <- rownames(rawAnt)
rawAntl <- melt(rawAnt, id = "Probe")
rawAntl$Type <- "log(Raw)"
rawAntl$value <- log(rawAntl$value + 1)

clrAnt$Probe <- rownames(clrAnt)
clrAntl <- melt(clrAnt, id = "Probe")
clrAntl$Type <- "CLR"

antl <- rbind(rawAntl, clrAntl)
antl$failedANT <- ifelse(grepl(paste(failedANT, collapse = "|"), antl$variable), "FAILED", "PASSED")
antl$lowCount <- ifelse(antl$variable == "HTG.4_1", "Low", "Normal")

newANTProfile <- ggplot(antl, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = failedANT)) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_manual("ANT Failure", values = c("red", "black"))
ggsave("./Paper1/Figures/Roche_IO_New_Proportionality_of_ANTCntrl_Probes.png", newANTProfile, width = 10, height = 8 )
@

<<IO_Repro_Study, echo = FALSE, message = FALSE>>=

file_names <- list.files(path = "C:/Projects/NPSeqQCApp_Validation/RawData/ImmuOnco/reproducibility", pattern="Parser.*", full.names=T, recursive=F)

#----- Heat Maps -----#
#First get header info on samples
dfclist <- list()
dfnlist <- list()
dflist <- list()
tlist <- list()

for(i in 1:length(file_names)){
  df <- as.data.frame(read_excel(file_names[i], skip = 8, col_names = FALSE))
  RowNames <- df$X1 
  tlist[[i]] <- df[1:3, ]
  
  Plate <- c("Plate ", rep(i, dim(df)[2]-1))
  dflist[[i]] <- rbind(Plate, df)
  
  #q-norm
  dfnorm <- df[-c(1:3), -1]
  dfnorm <- quantile_normalisation(data.matrix(dfnorm))
  dfnorm <- colSums(dfnorm)
  dfnorm <- rbind(df[1:2, -1], dfnorm)
  dfnorm <- cbind(df[1:3, 1], dfnorm)
  dfnlist[[i]] <- dfnorm
  
  #clr
  dfclr <- data.matrix(df[-c(1:3), -1])
  dfclr <- as.data.frame( t( clr( acomp( t(dfclr) ), detectionlimit = 0 ) ) )
  dfclr <- colSums(dfclr)
  dfclr <- rbind(df[1:2, -1], dfclr)
  dfclr <- cbind(df[1:3, 1], dfclr)
  dfclist[[i]] <- dfclr
  
}

getTots <- function(x){#use t-list
  df <- as.data.frame(t(x[, -1]))
  names(df) <- make.names(x[, 1])
  df$row <- gsub("(\\w{1})\\d{1,2}$", "\\1", df$Well)
  df$column <- gsub("\\w{1}(\\d{1,2})$", "\\1", df$Well)
  df$Total.Reads <- as.numeric(as.character(df$Total.Counts))
  df <- df[which(!grepl("No_Sample", df$Sample.Name)), ]
  return(df)
}

tots <- lapply(tlist, getTots)
# for(i in 1:length(tots)){
  # tots[[i]]$Plate <- paste0("Plate ", i)
# }

getPlates <- function(x){
  df <- as.data.frame(x)
  df$Proc <- gsub(".*(P\\d{2}).*", "\\1", df$Sample.Name)
  df$Day <- ifelse(grepl("D", df$Sample.Name), gsub(".*(D\\d{1}).*", "\\1", df$Sample.Name), "D1")
  df$Plate <- factor(paste0(df$Proc, "_", df$Day))
  return(df)
}

tots <- lapply(tots, getPlates)
#Choose P86 and ignore P02
totl <- do.call(rbind, tots)
totl <- totl[which(!grepl("P02", totl$Proc)),]
#define order of the plates for other plots
IO_repro_plates <- levels(totl$Plate)
totl$column <- factor(totl$column, levels = as.character(1:12))
#Raw totals
IOrawTotals <- ggplot(totl, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + facet_wrap(~Plate, ncol = 5) + plotTheme(legend.position = "right")  +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/IO_Repro_TotalCountHeatMap_RawTotals.png", IOrawTotals, width = 14 , height = 5)


totsn <- lapply(dfnlist, getTots)
totsn <- lapply(totsn, getPlates)

totln <- do.call(rbind, totsn)
totln <- totln[which(!grepl("P02", totln$Proc)),]
totln$column <- factor(totln$column, levels = as.character(1:12))
totln$Plate <- factor(totln$Plate, levels = IO_repro_plates)

#Normalized within plates
IONormPlates <- ggplot(totln, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + facet_wrap(~Plate, ncol = 5) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/IO_Repro_TotalCountHeatMap_NormalizedProbesbyPlate.png", IONormPlates, width = 14 , height = 5)

#Normalize together
dfw <- join_all(dflist, by = "X0")
rownames(dfw) <- dfw[, 1]
names(dfw) <- dfw[3, ]
dfw <- dfw[, which(!grepl("No_Sample", names(dfw)))]
dfw[-c(1:4), -1] <- quantile_normalisation(data.matrix(dfw[-c(1:4), -1]))
dfw <- dfw[, -1]
dfw[4, ] <- colSums(data.matrix(dfw[-c(1:4), ]))

#convert to long form
dfl <- as.data.frame(t(dfw[1:4,]))
dfl$row <- gsub("(\\w{1})(\\d{1,2})$", "\\1", dfl$Well)
dfl$column <- gsub("(\\w{1})(\\d{1,2})$", "\\2", dfl$Well)
dfl$column <- factor(dfl$column, levels = as.character(1:12))
dfl$Total.Reads <- as.numeric(as.character(dfl$`Total Counts`))
dfl$Proc <- gsub(".*(P\\d{2}).*", "\\1", dfl$`Sample Name`)
dfl$Day <- ifelse(grepl("D", dfl$`Sample Name`), gsub(".*(D\\d{1}).*", "\\1", dfl$`Sample Name`), "D1")
dfl$Plate <- factor(paste0(dfl$Proc, "_", dfl$Day), levels = IO_repro_plates)
dfl <- dfl[which(!grepl("P02", dfl$Plate)), ]


IONormAllPlates <- ggplot(dfl, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads )) + facet_wrap(~ Plate, ncol = 5) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/IO_Repro_TotalCountHeatMap_NormalizedProbes.png", IONormAllPlates, width = 14 , height = 5)


#CLR the total reads
clrReads <- function(x){
   cbind(x, CLR = as.vector(clr( acomp( as.numeric(as.character(x$Total.Counts)) ), detectionlimit = 0 )))
}
tots <- lapply(tots, FUN = clrReads)
CLRTotals <- do.call(rbind, tots)
#randomly remove P02 processor
CLRTotals <- CLRTotals[which(!grepl("P02", CLRTotals$Plate)), ]
CLRTotals$column <- factor(CLRTotals$column, levels = 1:12)
CLRTotals$Plate <- factor(CLRTotals$Plate, levels = IO_repro_plates)

IOCLRTots <- ggplot(CLRTotals, aes(x = column, y = row)) + geom_tile(aes(fill = CLR)) + facet_wrap(~Plate, ncol = 5) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/IO_Repro_TotalCountHeatMap_CLRTotals.png", IOCLRTots, width = 14 , height = 5)

#!-----------Check proportionality of pos controls ----->
raw.w <- join_all(dflist, by = "X0")
names(raw.w) <- raw.w[3, ]
rownames(raw.w) <- raw.w[, 1]
raw.w <- raw.w[, which(!grepl("No_Sample", names(raw.w)))]
rawPos <- raw.w[which(grepl("POS", rownames(raw.w))), -1]
clrPos <- as.data.frame(t(clr(acomp(t(data.matrix((rawPos)))), detectionLimit = 0)))
rawPos$Probe <- rownames(rawPos)
rawPosl <- melt(rawPos, id = "Probe")
rawPosl$Type <- "log(Raw)"
rawPosl$value <- log(as.numeric(as.character(rawPosl$value)))

clrPos$Probe <- rownames(clrPos)
clrPosl <- melt(clrPos, id = "Probe")
clrPosl$Type <- "CLR"

posl <- rbind(rawPosl, clrPosl)
suspects <- c("uRNA_25ng_P88_R2", "uRNA_25ng_P88_R3", "uRNA_D2_P02_R15", "uRNA_D2_P02_R16", "uRNA_D2_P02_R17")
posl$lowTotal <- ifelse(posl$variable %in% suspects, "Low", "Normal")


IOPosCntrl <- ggplot(posl, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = lowTotal)) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_discrete("Subjective Assessment of CLR on Total Reads (from heatmap)")
ggsave("./Paper1/Figures/IO_Repro_Proportionality_of_PosCntrl_Probes.png", IOPosCntrl, width = 7, height = 8 )


@

<<PCA_IO, echo = FALSE>>=

annodf <- data.frame(SampleID = names(raw.w)[-1])
annodf$Proc <- gsub(".*(P\\d{2}).*", "\\1", annodf$SampleID)
annodf$Day <- ifelse(grepl("D", annodf$SampleID), gsub(".*(D\\d{1}).*", "\\1", annodf$SampleID), "D1")
annodf$Plate <- factor(paste0(annodf$Proc, "_", annodf$Day), levels = IO_repro_plates)
annodf <- annodf[which(!grepl("P02", annodf$Proc)), ]
rownames(annodf) <- annodf$SampleID

pcaDat <- data.matrix(raw.w[-c(1:4), which(names(raw.w) %in% annodf$SampleID)])
pcplotdat <- plotPCA(pcaDat, annodf, scale = TRUE)
ggpca <- ggplot(pcplotdat, aes(x= PC1, y= PC2, color=Plate, shape=Proc, label = SampleID)) + 
    geom_point( size = 2)  + 
  geom_text(size = 1.7) + 
    xlim(-50, 50) + ylim(-50, 50) 
ggsave("./Paper1/Figures/IO_Repro_PCA_Raw(scaled).png", ggpca, width = 9, height = 8 )

pcaDatn <- data.matrix(dfw[-c(1:4), which(names(dfw) %in% annodf$SampleID)])
pcplotdatn <- plotPCA(pcaDatn, annodf, scale = FALSE)
ggpcan <- ggplot(pcplotdatn, aes(x= PC1, y= PC2, color=Plate, shape=Proc, label = SampleID)) + 
    geom_point( size = 2) + 
  geom_text(size = 1.7) 
ggsave("./Paper1/Figures/IO_Repro_PCA_qNorm.png", ggpcan, width = 9, height = 8 )

    
pcaDatc <- as.data.frame(t(clr(acomp(t(pcaDat), detectionlimit = 0))))
pcplotdatc <- plotPCA(pcaDatc, annodf, scale = FALSE)
ggpcac <- ggplot(pcplotdatc, aes(x= PC1, y= PC2, color=Plate, shape=Proc, label = SampleID)) + 
    geom_point( size = 2)   + 
  geom_text( size = 1.7) +
  xlim(-10, 50) + ylim(-10, 10)
ggsave("./Paper1/Figures/IO_Repro_PCA_CLR.png", ggpcac, width = 9, height = 8 )

@


<<miRNA HeatMaps, echo = FALSE, message = FALSE>>=
file_names <- list.files(path = "C:/Projects/NPSeqQCApp_Validation/RawData/miRNA/reproducibility", pattern="RR.*", full.names=T, recursive=F)

#----- Heat Maps -----#
#First get header info on samples
dfclist_mi <- list()
dfnlist_mi <- list()
dflist_mi <- list()
tlist_mi <- list()

for(i in 1:length(file_names)){
  df <- as.data.frame(read_excel(file_names[i], skip = 8, col_names = FALSE))
  rownames(df) <- make.names(df$X1 )
  tlist_mi[[i]] <- df[1:3, -1]
  
  Plate <- c("Plate ", rep(i, dim(df)[2]-1))
  dflist_mi[[i]] <- rbind(Plate, df)
  
  #q-norm
  dfnorm <- df[-c(1:3), -1]
  dfnorm <- quantile_normalisation(data.matrix(dfnorm))
  dfnorm <- colSums(dfnorm)
  dfnorm <- rbind(df[1:2, -1], dfnorm)
#   dfnorm <- cbind(df[1:3, 1], dfnorm)
  rownames(dfnorm) <- rownames(df)[1:3]
  dfnlist_mi[[i]] <- dfnorm
  
  #clr
  dfclr <- data.matrix(df[-c(1:3), -1])
  dfclr <- as.data.frame( t( clr( acomp( t(dfclr) ), detectionlimit = 0 ) ) )
  dfclr <- colSums(dfclr)
  dfclr <- rbind(df[1:2, -1], dfclr)
  dfclr <- cbind(df[1:3, 1], dfclr)
  dfclist_mi[[i]] <- dfclr
  
}

getTots_mi <- function(x){#use t-list
  df <- as.data.frame(t(x))
  df$row <- gsub("(\\w{1})\\d{1,2}$", "\\1", df$Well)
  df$column <- gsub("\\w{1}(\\d{1,2})$", "\\1", df$Well)
  df$Total.Reads <- as.numeric(as.character(df$Total.Reads))
  df <- df[which(!grepl("No_Sample", df$Sample.Name)), ]
  return(df)
}



tots_mi <- lapply(tlist_mi, getTots_mi)
for(i in 1:length(tots_mi)){
  tots_mi[[i]]$Plate <- paste0("Plate ", i)
}

totl_mi <- do.call(rbind, tots_mi)

#define order of the plates for other plots
mi_repro_plates <- levels(totl_mi$Plate)
totl_mi$column <- factor(totl_mi$column, levels = as.character(1:12))

#Raw totals
mirawTotals <- ggplot(totl_mi, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + facet_wrap(~Plate, ncol = 5) + plotTheme(legend.position = "right")  +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/miRNA_Repro_TotalCountHeatMap_RawTotals.png", mirawTotals, width = 14 , height = 5)


totsn_mi <- lapply(dfnlist_mi, getTots_mi)
for(i in 1:length(totsn_mi)){
  totsn_mi[[i]]$Plate <- paste0("Plate ", i)
}


totln_mi <- do.call(rbind, totsn_mi)
totln_mi$column <- factor(totln_mi$column, levels = as.character(1:12))

#Normalized within plates
miNormPlates <- ggplot(totln_mi, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads)) + facet_wrap(~Plate, ncol = 5) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/miRNA_Repro_TotalCountHeatMap_NormalizedProbesbyPlate.png", miNormPlates, width = 14 , height = 5)

#Normalize together
dfw_mi <- join_all(dflist_mi, by = "X1")
rownames(dfw_mi) <- make.names(dfw_mi[, 1])
names(dfw_mi) <- make.names(dfw_mi[3, ])
dfw_mi <- dfw_mi[, which(!grepl("No_Sample", names(dfw_mi)))]
dfw_mi[-c(1:5), -1] <- quantile_normalisation(data.matrix(dfw_mi[-c(1:5), -1]))
dfw_mi <- dfw_mi[, -1]
dfw_mi[4, ] <- colSums(data.matrix(dfw_mi[-c(1:4), ]))
#remove aligned reads row
dfw_mi <- dfw_mi[-5,]

#convert to long form
dfl_mi <- as.data.frame(t(dfw_mi[1:4,]))
dfl_mi$row <- gsub("(\\w{1})(\\d{1,2})$", "\\1", dfl_mi$Well)
dfl_mi$column <- gsub("(\\w{1})(\\d{1,2})$", "\\2", dfl_mi$Well)
dfl_mi$column <- factor(dfl_mi$column, levels = as.character(1:12))
dfl_mi$Total.Reads <- as.numeric(as.character(dfl_mi$Total.Reads))

miNormAllPlates <- ggplot(dfl_mi, aes(x = column, y = row)) + geom_tile(aes(fill = Total.Reads )) + facet_wrap(~ Plate., ncol = 5) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/miRNA_Repro_TotalCountHeatMap_NormalizedProbes.png", miNormAllPlates, width = 14 , height = 5)


#CLR the total reads
clrReads <- function(x){
   cbind(x, CLR = as.vector(clr( acomp( as.numeric(as.character(x$Total.Reads)) ), detectionlimit = 0 )))
}
tots_mi <- lapply(tots_mi, FUN = clrReads)
CLRTotals_mi <- do.call(rbind, tots_mi)
CLRTotals_mi$column <- factor(CLRTotals_mi$column, levels = 1:12)

miCLRTots <- ggplot(CLRTotals_mi, aes(x = column, y = row)) + geom_tile(aes(fill = CLR)) + facet_wrap(~Plate, ncol = 5) + plotTheme(legend.position = "right") +  xlab("Plate Column") + ylab("Plate Row")
ggsave("./Paper1/Figures/miRNA_Repro_TotalCountHeatMap_CLRTotals.png", miCLRTots, width = 14 , height = 5)

#!-----------Check proportionality of pos controls ----->
raw.w.mi <- join_all(dflist_mi, by = "X1")
names(raw.w.mi) <- make.names(raw.w.mi[3, ])
rownames(raw.w.mi) <- make.names(raw.w.mi[, 1])
rawPos.mi <- raw.w.mi[which(grepl("POS", rownames(raw.w.mi))), -1]
clrPos.mi <- as.data.frame(t(clr(acomp(t(data.matrix((rawPos.mi)))), detectionLimit = 0)))
rawPos.mi$Probe <- rownames(rawPos.mi)
rawPosl.mi <- melt(rawPos.mi, id = "Probe")
rawPosl.mi$Type <- "log(Raw)"
rawPosl.mi$value <- log(as.numeric(as.character(rawPosl.mi$value)))

clrPos.mi$Probe <- rownames(clrPos.mi)
clrPosl.mi <- melt(clrPos.mi, id = "Probe")
clrPosl.mi$Type <- "CLR"

posl.mi <- rbind(rawPosl.mi, clrPosl.mi)
suspects <- c("run229.FFPE_3_1")#, "run228.Brain_5_1", "run228.Plasma_7_1")
posl.mi$lowTotal <- ifelse(posl.mi$variable %in% suspects, "Low", "Normal")
posl.mi$Plate <- gsub("(^run\\d{3})\\.(\\w+)\\_\\d\\_\\d$", "\\1", posl.mi$variable)
posl.mi$SampType <- gsub("(^run\\d{3})\\.(\\w+)\\_\\d\\_\\d$", "\\2", posl.mi$variable)

miPosCntrl <- ggplot(posl.mi, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = lowTotal)) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_discrete("Subjective Assessment of CLR on Total Reads (from heatmap)")
ggsave("./Paper1/Figures/miRNA_Repro_Proportionality_of_PosCntrl_Probes.png", miPosCntrl, width = 7, height = 8 )

miPosCntrl_plate <- ggplot(posl.mi, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = Plate), alpha = .5) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_discrete("Plate") + guides(colour = guide_legend(override.aes = list(alpha = 1)))
ggsave("./Paper1/Figures/miRNA_Repro_Proportionality_of_PosCntrl_Probes_byPlate.png", miPosCntrl_plate, width = 7, height = 8)

miPosCntrl_type <- ggplot(posl.mi, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = SampType), alpha = .5) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_discrete("Sample Type") + guides(colour = guide_legend(override.aes = list(alpha = 1)))
ggsave("./Paper1/Figures/miRNA_Repro_Proportionality_of_PosCntrl_Probes_byType.png", miPosCntrl_type, width = 7, height = 8)

#look at the total reads in relation to the proportionality
posl.mi <- merge(posl.mi, dfl_mi, by.x = "variable", by.y = 0)
miPosCntrl_total <- ggplot(posl.mi, aes(x = Probe, y = value, group = variable )) + geom_point() + geom_line(aes(color = log2(Total.Reads))) + facet_wrap(~Type, ncol = 1, scales = "free_y") + plotTheme() + scale_color_gradient2("Total Reads",low = "red", mid = "grey", high = "blue", midpoint = median(log2(dfl_mi$Total.Reads))) 
ggsave("./Paper1/Figures/miRNA_Repro_Proportionality_of_PosCntrl_Probes_byTotal.png", miPosCntrl_total, width = 7, height = 8)

@


<<PCA_miRNA, echo = FALSE>>=
annodf.mi <- data.frame(SampleID = names(raw.w.mi)[-1])
annodf.mi$Plate <- gsub("^(run\\d{3})\\..*", "\\1", annodf.mi$SampleID)
annodf.mi$SampType <- gsub("(^run\\d{3})\\.(\\w+)\\_\\d\\_\\d$", "\\2", annodf.mi$SampleID)
rownames(annodf.mi) <- annodf.mi$SampleID

#remove 0 count probes
pcaDat.mi <- cpm.stand(data.matrix(raw.w.mi[-c(1:5), which(names(raw.w.mi) %in% annodf.mi$SampleID)]))

pcaDat.mi <- pcaDat.mi[, ]
pcplotdat.mi <- plotPCA(pcaDat.mi, annodf.mi, scale = FALSE)
ggpca.mi <- ggplot(pcplotdat.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3)  + 
  # geom_text(size = 2) + 
  coord_equal() + ylim(c(-250, 100))
ggsave("./Paper1/Figures/miRNA_Repro_PCA_CPM.png", ggpca.mi, width = 9, height = 8 )

pcaDatn.mi <- data.matrix(dfw_mi[-c(1:4), which(names(dfw_mi) %in% annodf.mi$SampleID)])
pcaDatn.mi <- pcaDatn.mi[-which(rowSums(pcaDatn.mi) == 0), ]
pcplotdatn.mi <- plotPCA(pcaDatn.mi, annodf.mi, scale = FALSE)
ggpcan.mi <- ggplot(pcplotdatn.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3) + xlim(c(-20000, 20000)) + ylim(c(-100000, -90000))
  # geom_text(size = 1.7)  + 
  coord_equal()
ggsave("./Paper1/Figures/miRNA_Repro_PCA_qNorm.png", ggpcan.mi, width = 9, height = 8 )

#zoom in on clusters in quantile norm
ggpcan.mi.FFPE <- ggplot(pcplotdatn.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3) + xlim(c(-20000, 20000)) + ylim(c(-100000, -90000))
ggsave("./Paper1/Figures/miRNA_Repro_PCA_qNorm_zoomToFFPE.png", ggpcan.mi.FFPE, width = 9, height = 8 )
ggpcan.mi.Plasma <- ggplot(pcplotdatn.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3) + xlim(c(-90000, -75000)) + ylim(c(35000, 50000))
ggsave("./Paper1/Figures/miRNA_Repro_PCA_qNorm_zoomToPlasma.png", ggpcan.mi.Plasma, width = 9, height = 8 )
ggpcan.mi.Brain <- ggplot(pcplotdatn.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3) + xlim(c(75000, 90000)) + ylim(c(45000, 55000))
ggsave("./Paper1/Figures/miRNA_Repro_PCA_qNorm_zoomToBrain.png", ggpcan.mi.Brain, width = 9, height = 8 )


pcaDatm.mi <- data.matrix(raw.w.mi[-c(1:4), which(names(raw.w.mi) %in% annodf.mi$SampleID)])
pcaDatm.mi <- pcaDatm.mi[-which(rowSums(pcaDatm.mi) == 0), ]
pcaDatm.mi <- median.norm(pcaDatm.mi)
pcplotdatm.mi <- plotPCA(pcaDatm.mi, annodf.mi, scale = FALSE)
ggpcam.mi <- ggplot(pcplotdatm.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3) + 
  # geom_text(size = 1.7)  + 
  coord_equal()
ggsave("./Paper1/Figures/miRNA_Repro_PCA_medNorm.png", ggpcam.mi, width = 9, height = 8 )
    
pcaDatc.mi <- data.matrix(raw.w.mi[-c(1:5), which(names(raw.w.mi) %in% annodf.mi$SampleID)])
pcaDatc.mi <- pcaDatc.mi[-which(rowSums(pcaDatc.mi) == 0), ]
pcaDatc.mi <- as.data.frame(t(clr(ccomp(t(pcaDatc.mi)))))
pcplotdatc.mi <- plotPCA(pcaDatc.mi, annodf.mi, scale = FALSE)
ggpcac <- ggplot(pcplotdatc.mi, aes(x= PC1, y= PC2, color=Plate, shape=SampType, label = SampleID)) + 
    geom_point( size = 3)   + 
  # geom_text( size = 10) +
  coord_equal()
ggsave("./Paper1/Figures/miRNA_Repro_PCA_CLR.png", ggpcac, width = 9, height = 8 )

@


<<PCA_Biplot_CNTRL_Probes, echo = FALSE, message = FALSE>>=
#-----Create biplot with ggplot-----#
nobs.factor <- sqrt(nrow(pca$x) - 1)
d <- pca$sdev
u <- sweep(pca$x, 2, 1/(d * nobs.factor), FUN = "*")
v <- pca$rotation
#select first two PCs
df.u <- as.data.frame(sweep(u[, 1:2], 2, c(1,1), FUN = "*"))
v <- sweep(v, 2, d, FUN = "*")
df.v <- as.data.frame(v[, 1:2])
names(df.u) <- c("xvar", "yvar")
names(df.v) <- names(df.u)
df.u <- df.u * nobs.factor
r <- sqrt(qchisq(0.69, df = 2)) * prod(colMeans(df.u^2))^(1/4)
v.scale <- rowSums(v^2)
df.v <- r * df.v/sqrt(max(v.scale))
df.v$Type <- gsub("(\\D{2,4})\\d?.*", "\\1", rownames(df.v))
df.v$Plate <- substr(as.character(rownames(df.v)), start = nchar(as.character(rownames(df.v))), stop =  nchar(as.character(rownames(df.v))))
df.v$angle <- with(df.v, (180/pi) * atan(yvar/xvar))
df.v$hjust = with(df.v, (-.5 * sign(xvar))/2)

pca.biplot <- ggplot(data = df.u, aes(x = xvar, y = yvar)) + 
  geom_point() +
  xlab("Standardized PC 1") + 
  ylab("Standardized PC 2") + 
  coord_equal() +
  xlim(c(-5.5, 8)) + 
  ylim(c(-5.5, 8)) +
  geom_segment(data = df.v, aes(x = 0, y = 0, xend = xvar, yend = yvar, color = Plate), 
               arrow = arrow(length = unit(1/2, "picas"))) +
  geom_text(data = df.v, 
            aes(label = rownames(v), x = xvar, y = yvar, angle = angle, hjust = hjust, color = Plate), 
            size = 3) + 
  HTGPackage::plotTheme(axis.text.x = element_text()) + 
  scale_color_discrete("Batch")


@


\end{document}